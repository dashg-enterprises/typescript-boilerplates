name: CI Merge Step - PR and Merge to cloud-deployment

on: workflow_dispatch

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 624626124579.dkr.ecr.us-east-1.amazonaws.com                   
  ECR_REPOSITORY: examplecontextimages
  TF_VERSION: '1.9.3'
  TG_VERSION: '0.63.6'
  TG_PATH: 'deploy'
  TG_DIR: 'live/aws/_initializations/example-context'
  TG_APP_DIR: 'live/aws/dev/applications/example-context'

jobs:
  deploy:
    name: Merge Build
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Checkout cloud-deployment
        uses: actions/checkout@v4
        with:
          repository: dashg-enterprises/cloud-deployment
          token: ${{ secrets.CLOUD_DEPLOYMENT_PAT }}
          path: ${{ env.TG_PATH }}

      - uses: actions/setup-go@v5
        with:
          go-version: '^1.13.1' # The Go version to download (if necessary) and use.

      - name: Get hcledit
        run: |
          git clone https://github.com/minamijoyo/hcledit
          cd hcledit/
          make install
          hcledit version
          cd ../
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure Bounded Context is initialized
        uses: gruntwork-io/terragrunt-action@v2
        env:
          INPUT_PRE_EXEC_1: |
            git config --global url."https://user:${{secrets.CLOUD_DEPLOYMENT_PAT}}@github.com".insteadOf "https://github.com"
          INPUT_PRE_EXEC_2: |
            git config --global --list
        with:
          TF_VERSION: ${{ env.TF_VERSION }}
          TG_VERSION: ${{ env.TG_VERSION }}
          tg_dir: '${{ env.TG_PATH }}/${{ env.TG_DIR }}'
          tg_command: 'apply --terragrunt-source ../../../../../iac/initialization'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Change directory into deployment repo
        run: "cd ${{ env.TG_PATH }}/${{ env.TG_APP_DIR }}"

      - name: HCL Before
        run: cat terragrunt.hcl | hcledit body get resource.foo.bar

      - name: HCL Edit
        run: cat terragrunt.hcl | hcledit attribute set inputs.application_image '"${{ steps.build-image.outputs.image }}"'

      - name: HCL After
        run: cat terragrunt.hcl | hcledit body get resource.foo.bar

      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v7
        with:
          branch: "build/${{ env.ECR_REPOSITORY }}-${{ github.sha }}"
          token: ${{ secrets.CLOUD_DEPLOYMENT_PAT }}

      - name: Check outputs
        if: ${{ steps.cpr.outputs.pull-request-number }}
        run: |
          echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
          echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"

      - name: Enable Pull Request Automerge
        run: gh pr merge --merge --auto "${{ steps.cpr.outputs.pull-request-number }}"
        env:
          GH_TOKEN: ${{ secrets.CLOUD_DEPLOYMENT_PAT }}